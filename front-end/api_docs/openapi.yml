  openapi: 3.0.2
  
  info:
    title: Solidity
    description: A platform that aims to tighten the gap between NGOs and donors, and make the transactions painless.
    version: 0.1.0
  
  servers:
    - url: http://localhost:5000/api/v1.0
      description: Development (local) server
    - url: http://83.212.123.145:8080/api/v1.0
      description: Testing server
  
  paths:
    /users:
      get:
        summary: Returns a list of users.
        responses:
          '200':
            description: A JSON array of users
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: string
                      example: success
                    data:
                      type: array
                      items: 
                        properties:
                          id:
                            type: integer
                            example: 4
                          email:
                            type: string
                            example: user@provider.com
                        required:  
                          - id
                          - email
                        
      post:
        summary: Register a new user.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    enum: [NGO, USER, COMPANY]
                  email:
                    type: string
                  password:
                    type: string
                required:
                  - type
                  - email
                  - password
        responses:
          '201':
            description: User registered
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: string
                      example: success
                    data:
                      type: object
                    
          '409':
            description: Email already exists
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/FailResponse'
                      
          '422':
            description: Validation error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/FailResponse'
                  
    /users/login:
      post:
        summary: Request a user login.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        responses:
          '200':
            description: The ID of the user
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: string
                      example: success
                    data:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 4
                        type:
                          type: string
                          example: NGO

          '404':
            description: User not found message
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/FailResponse'
                      
          '422':
            description: Validation error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/FailResponse'
                  
    /users/{type}/{id}:
      get:
        summary: Get the user's profile.
        parameters:
        - name: type
          in: path
          description: Entity type
          required: true
          schema:
            type: string
            enum: [NGO, USER, COMPANY]
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
        responses:
          '200':
            description: The ID of the user
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: string
                      example: success
                    data:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 4
                        type:
                          type: string
                          example: NGO

          '404':
            description: User not found message
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/FailResponse'
                  
      delete:
        summary: Delete a user.
        parameters:
        - name: type
          in: path
          description: Entity type
          required: true
          schema:
            type: string
            enum: [NGO, USER, COMPANY]
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
        responses:
          '200':
            description: The ID of the user
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: string
                      example: success
                    data:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 4

          '404':
            description: User not found message
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/FailResponse'
                  
      put:
        summary: Update the user's profile.
        parameters:
        - name: type
          in: path
          description: Entity type
          required: true
          schema:
            type: string
            enum: [NGO, USER, COMPANY]
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
        responses:
          '200':
            description: The ID of the user
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: string
                      example: success
                    data:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 4

          '404':
            description: User not found message
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/FailResponse'
      
  components:
    schemas:
      User:
        properties:
          email:
            type: string
            example: user@provider.com
          password:
            type: string
            example: strong_password
        required:  
          - email
          - password
      
      FailResponse:
        properties:
          status:
            type: string
            example: fail
          errors:
            type: array
            items:
              type: string
              example: Some error occured
  